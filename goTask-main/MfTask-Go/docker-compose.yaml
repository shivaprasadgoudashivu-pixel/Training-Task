services:
  # -------- Controller-only node --------
  kafka-controller:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-controller
    environment:
      CLUSTER_ID: "5hDiE5vETjicqnOmlhZ9Og"
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller:9093
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs

      # --- JMX Exporter for controller ---
      JMX_PORT: 55551
      KAFKA_OPTS: "-javaagent:/opt/jmx/jmx_prometheus_javaagent.jar=5555:/opt/jmx/kafka-jmx.yml"
    ports:
      - "9093:9093"
    volumes:
      - controller-logs:/tmp/kraft-combined-logs
      - ./monitoring:/opt/jmx:ro               # <-- mount agent + config
    networks: [demo-network]

  # -------- Broker 1 --------
  kafka1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka1
    environment:
      CLUSTER_ID: "5hDiE5vETjicqnOmlhZ9Og"
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: broker
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller:9093
      KAFKA_LISTENERS: INTERNAL://:9092,EXTERNAL://:19092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,EXTERNAL://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 2

      # --- JMX Exporter for broker1 ---
      JMX_PORT: 55561
      KAFKA_OPTS: "-javaagent:/opt/jmx/jmx_prometheus_javaagent.jar=5556:/opt/jmx/kafka-jmx.yml"
    ports:
      - "19092:19092"
    volumes:
      - kafka1-logs:/tmp/kraft-combined-logs
      - ./monitoring:/opt/jmx:ro               # <-- mount agent + config
    depends_on: [kafka-controller]
    networks: [demo-network]

  # -------- Broker 2 --------
  kafka2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka2
    environment:
      CLUSTER_ID: "5hDiE5vETjicqnOmlhZ9Og"
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: broker
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller:9093
      KAFKA_LISTENERS: INTERNAL://:9092,EXTERNAL://:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 2

      # --- JMX Exporter for broker2 ---
      JMX_PORT: 55571
      KAFKA_OPTS: "-javaagent:/opt/jmx/jmx_prometheus_javaagent.jar=5557:/opt/jmx/kafka-jmx.yml"
    ports:
      - "29092:29092"
    volumes:
      - kafka2-logs:/tmp/kraft-combined-logs
      - ./monitoring:/opt/jmx:ro
    depends_on: [kafka-controller]
    networks: [demo-network]

  # -------- Broker 3 --------
  kafka3:
    image: confluentinc/cp-kafka:latest
    container_name: kafka3
    environment:
      CLUSTER_ID: "5hDiE5vETjicqnOmlhZ9Og"
      KAFKA_NODE_ID: 4
      KAFKA_PROCESS_ROLES: broker
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller:9093
      KAFKA_LISTENERS: INTERNAL://:9092,EXTERNAL://:39092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:9092,EXTERNAL://localhost:39092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 2

      # --- JMX Exporter for broker3 ---
      JMX_PORT: 55591
      KAFKA_OPTS: "-javaagent:/opt/jmx/jmx_prometheus_javaagent.jar=5559:/opt/jmx/kafka-jmx.yml"
    ports:
      - "39092:39092"
    volumes:
      - kafka3-logs:/tmp/kraft-combined-logs
      - ./monitoring:/opt/jmx:ro
    depends_on: [kafka-controller]
    networks: [demo-network]

  # -------- Kafka UI (unchanged) --------
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "59090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092,kafka2:9092,kafka3:9092
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks: [demo-network]

  pg:
    image: docker.io/library/postgres
    container_name: postgres
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app123
      POSTGRES_DB: usersdb
    ports:
      - "5432:5432" 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d usersdb"]
      interval: 5s
      timeout: 3s
      retries: 10

    networks: [demo-network]
  pg-exporter:
    image: docker.io/wrouesnel/postgres_exporter
    container_name: postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://app:app123@pg:5432/usersdb?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      pg:
        condition: service_healthy 

    networks: [demo-network]  
  pg-ui:
    image: adminer
    container_name: pgui
    ports:
      - "28080:8080"
    networks: [demo-network]

  mf-service:
      image:  docker.io/shivaprasadgoudam/mf:v1
      container_name: mf-service
      environment:
        PORT: "8081"
        DSN: "host=pg user=app password=app123 dbname=usersdb port=5432 sslmode=disable"
        KAFKA_BROKERS: "kafka1:9092,kafka2:9092,kafka3:9092"
    
      ports: ["8081:8081"]
      depends_on:
        - kafka1
        - kafka2
        - kafka3
        - pg
      networks: [demo-network]

  key-cloak:
      image: quay.io/keycloak/keycloak:26.3.3
      container_name: keycloak
      environment:
        PORT: "8084"
        KC_BOOTSTRAP_ADMIN_USERNAME: "admin"
        KC_BOOTSTRAP_ADMIN_PASSWORD: "admin"
      ports: ["8084:8080"]
      command: "start-dev"
      networks: [demo-network]

  redis-7000:
    image: redis:7.2-alpine
    container_name: redis-7000
    command: >
      sh -c "redis-server
      --port 7000
      --cluster-enabled yes
      --cluster-config-file nodes.conf
      --cluster-node-timeout 5000
      --appendonly yes
      --cluster-announce-hostname redis-7000
      --cluster-announce-port 7000
      --cluster-announce-bus-port 17000"
    ports: ["7000:7000","17000:17000"]

  redis-7001:
    image: redis:7.2-alpine
    container_name: redis-7001
    command: >
      sh -c "redis-server
      --port 7001
      --cluster-enabled yes
      --cluster-config-file nodes.conf
      --cluster-node-timeout 5000
      --appendonly yes
      --cluster-announce-hostname redis-7001
      --cluster-announce-port 7001
      --cluster-announce-bus-port 17001"
    ports: ["7001:7001","17001:17001"]

  redis-7002:
    image: redis:7.2-alpine
    container_name: redis-7002
    command: >
      sh -c "redis-server
      --port 7002
      --cluster-enabled yes
      --cluster-config-file nodes.conf
      --cluster-node-timeout 5000
      --appendonly yes
      --cluster-announce-hostname redis-7002
      --cluster-announce-port 7002
      --cluster-announce-bus-port 17002"
    ports: ["7002:7002","17002:17002"]

  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    # volumes:
    #   - redis-data:/data:Z
    command: ["redis-server", "--appendonly", "yes"] #, "--notify-keyspace-events", "KEA"]
    networks: [demo-network]


  minio:
    image: quay.io/minio/minio
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    networks: [demo-network]


networks:
  demo-network: {}


volumes:
  controller-logs: {}
  kafka1-logs: {}
  kafka2-logs: {}
  kafka3-logs: {}
  minio-data: {}
